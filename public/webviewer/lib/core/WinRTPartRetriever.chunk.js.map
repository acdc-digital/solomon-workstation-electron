{"version":3,"file":"WinRTPartRetriever.chunk.js","sources":["webpack:///WinRTPartRetriever.chunk.js","webpack:///./src/core/src/namespaces/PartRetrievers/WinRTPartRetriever.ts"],"sourcesContent":["(window[\"wpCoreControlsBundle\"] = window[\"wpCoreControlsBundle\"] || []).push([[14],{\n\n/***/ 528:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _util_constants_status__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(293);\n/* harmony import */ var _HttpPartRetriever__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(518);\n/* harmony import */ var _PartRetriever__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(113);\n/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(439);\n\n\n\n\n\n// contains the callbacks of the functions that are waiting to execute\nvar callbackMap = {};\n/**\n * Construct a new WinRTRangeRequest.\n * @name WinRTRangeRequest\n * @param {string} url The URL of the file to load. May be relative to the current page.\n * @param range The range of bytes to load, inclusive.\n * @param range.start Start\n * @param [range.stop] Stop\n * @ignore\n */\nvar WinRTRangeRequest = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"c\"])(WinRTRangeRequest, _super);\n    function WinRTRangeRequest(url, range) {\n        var _this = _super.call(this, url, range) || this;\n        _this.url = url;\n        _this.range = range;\n        _this.status = _util_constants_status__WEBPACK_IMPORTED_MODULE_1__[/* RequestStatus */ \"a\"]['NOT_STARTED'];\n        return _this;\n    }\n    WinRTRangeRequest.prototype.start = function (callback) {\n        var me = this;\n        var success = function (data) {\n            // convert from base64 to byte array\n            var decoded = atob(data);\n            var i;\n            var il = decoded.length;\n            var bytes = new Uint8Array(il);\n            for (i = 0; i < il; ++i) {\n                bytes[i] = decoded.charCodeAt(i);\n            }\n            var n = bytes.length;\n            var finalData = '';\n            var arr;\n            var j = 0;\n            while (j < n) {\n                arr = bytes.subarray(j, j + 1024);\n                j += 1024;\n                finalData += String.fromCharCode.apply(null, arr);\n            }\n            me.success(finalData, callback);\n        };\n        var fail = function () {\n            me.status = _util_constants_status__WEBPACK_IMPORTED_MODULE_1__[/* RequestStatus */ \"a\"]['ERROR'];\n            callback({\n                code: me.status,\n            });\n        };\n        if (typeof callbackMap[this.range.start] !== 'undefined') {\n            me.getNextRequest();\n            return;\n        }\n        callbackMap[this.range.start] = {\n            success: success,\n            fail: fail,\n        };\n        // send url to WinRT\n        // @ts-ignore\n        window.external.notify(this.url);\n        this.status = _util_constants_status__WEBPACK_IMPORTED_MODULE_1__[/* RequestStatus */ \"a\"]['STARTED'];\n        me.getNextRequest();\n    };\n    return WinRTRangeRequest;\n}(_HttpPartRetriever__WEBPACK_IMPORTED_MODULE_2__[\"ByteRangeRequest\"]));\n/**\n * Constructs a new WinRTPartRetriever.\n * WinRTPartRetriever retrieves Document parts asynchronously from a .xod that exists locally in a WinRT app.\n * <br/><br/>\n * <b>Note</b>: As of version 6.0, directly constructing a part retriever is deprecated and the capability will be removed in a future version. Please use the {@link Core.PartRetrievers#getPartRetriever} function instead.\n * @class Represents a http part retriever.\n * @name WinRTPartRetriever\n * @extends Core.PartRetrievers.HttpPartRetriever\n * @memberof Core.PartRetrievers\n * @param {string} url The URL of the file to load. May be relative to the current page.\n * @param {Core.PartRetrievers.CacheHinting} cacheHint The type of cache hinting to use\n * @param {function} decrypt Function to be called to decrypt a part of the file\n * @param {Object} decryptOptions An object with options for the decryption e.g. {p: \"pass\", type: \"aes\"} where is p is the password\n * @ignore\n */\nvar WinRTPartRetriever = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"c\"])(WinRTPartRetriever, _super);\n    function WinRTPartRetriever(url, cacheHint, decrypt, decryptOptions) {\n        var _this = _super.call(this, url, decrypt, decryptOptions) || this;\n        _this.rangeRequest = WinRTRangeRequest;\n        return _this;\n    }\n    WinRTPartRetriever.prototype.createRangeURL = function (url, range) {\n        return url + \"?\" + range.start + \"&\" + (range.stop ? range.stop : '');\n    };\n    return WinRTPartRetriever;\n}(_PartRetriever__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"]));\nObject(_Exports__WEBPACK_IMPORTED_MODULE_4__[/* exportEventHandler */ \"a\"])(WinRTPartRetriever);\nObject(_Exports__WEBPACK_IMPORTED_MODULE_4__[/* exportPartRetrieverFunctions */ \"b\"])(WinRTPartRetriever);\n/* harmony default export */ __webpack_exports__[\"default\"] = (WinRTPartRetriever);\n\n\n/***/ })\n\n}]);","import { RequestStatus } from '../../util/constants/status';\nimport { CacheHinting } from './constants';\nimport { ByteRangeRequest, HttpPartRetrieverCallback } from './HttpPartRetriever';\nimport PartRetriever, { PartRetrieverRange, PartRetrieverDecrypt, PartRetrieverDecryptOptions } from './PartRetriever';\nimport { exportEventHandler, exportPartRetrieverFunctions } from '../Exports';\n\n// contains the callbacks of the functions that are waiting to execute\nconst callbackMap: {\n  [name: string]: {\n    success: Function;\n    fail: Function;\n  };\n} = {};\n\n/**\n * Construct a new WinRTRangeRequest.\n * @name WinRTRangeRequest\n * @param {string} url The URL of the file to load. May be relative to the current page.\n * @param range The range of bytes to load, inclusive.\n * @param range.start Start\n * @param [range.stop] Stop\n * @ignore\n */\nclass WinRTRangeRequest extends ByteRangeRequest {\n  constructor(url: string, range: PartRetrieverRange) {\n    super(url, range);\n\n    this.url = url;\n    this.range = range;\n\n    this.status = RequestStatus['NOT_STARTED'];\n  }\n\n  start(callback: HttpPartRetrieverCallback) {\n    const me = this;\n\n    const success = function(data: any) {\n      // convert from base64 to byte array\n      const decoded = atob(data);\n      let i;\n      const il = decoded.length;\n      const bytes = new Uint8Array(il);\n\n      for (i = 0; i < il; ++i) {\n        bytes[i] = decoded.charCodeAt(i);\n      }\n\n      const n = bytes.length;\n      let finalData = '';\n      let arr;\n      let j = 0;\n\n      while (j < n) {\n        arr = bytes.subarray(j, j + 1024);\n        j += 1024;\n        finalData += String.fromCharCode.apply(null, arr);\n      }\n\n      me.success(finalData, callback);\n    };\n\n    const fail = function() {\n      me.status = RequestStatus['ERROR'];\n      callback({\n        code: me.status,\n      });\n    };\n\n    if (typeof callbackMap[this.range.start] !== 'undefined') {\n      me.getNextRequest();\n      return;\n    }\n\n    callbackMap[this.range.start] = {\n      success: success,\n      fail: fail,\n    };\n\n    // send url to WinRT\n    // @ts-ignore\n    window.external.notify(this.url);\n\n    this.status = RequestStatus['STARTED'];\n\n    me.getNextRequest();\n  }\n}\n\n/**\n * Constructs a new WinRTPartRetriever.\n * WinRTPartRetriever retrieves Document parts asynchronously from a .xod that exists locally in a WinRT app.\n * <br/><br/>\n * <b>Note</b>: As of version 6.0, directly constructing a part retriever is deprecated and the capability will be removed in a future version. Please use the {@link Core.PartRetrievers#getPartRetriever} function instead.\n * @class Represents a http part retriever.\n * @name WinRTPartRetriever\n * @extends Core.PartRetrievers.HttpPartRetriever\n * @memberof Core.PartRetrievers\n * @param {string} url The URL of the file to load. May be relative to the current page.\n * @param {Core.PartRetrievers.CacheHinting} cacheHint The type of cache hinting to use\n * @param {function} decrypt Function to be called to decrypt a part of the file\n * @param {Object} decryptOptions An object with options for the decryption e.g. {p: \"pass\", type: \"aes\"} where is p is the password\n * @ignore\n */\n\nclass WinRTPartRetriever extends PartRetriever {\n  rangeRequest: typeof WinRTRangeRequest;\n\n  constructor(url: string, cacheHint: CacheHinting, decrypt: PartRetrieverDecrypt, decryptOptions: PartRetrieverDecryptOptions) {\n    super(url, decrypt, decryptOptions);\n\n    this.rangeRequest = WinRTRangeRequest;\n  }\n\n  createRangeURL(url: string, range: PartRetrieverRange) {\n    return `${url}?${range.start}&${range.stop ? range.stop : ''}`;\n  }\n}\n\nexportEventHandler(WinRTPartRetriever);\nexportPartRetrieverFunctions(WinRTPartRetriever);\n\nexport default WinRTPartRetriever;"],"mappings":";AAAA;AC+CA;AA0EA;","sourceRoot":""}