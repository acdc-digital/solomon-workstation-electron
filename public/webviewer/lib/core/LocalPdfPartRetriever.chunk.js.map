{"version":3,"file":"LocalPdfPartRetriever.chunk.js","sources":["webpack:///LocalPdfPartRetriever.chunk.js","webpack:///./src/core/src/namespaces/PartRetrievers/LocalPdfPartRetriever.ts"],"sourcesContent":["(window[\"wpCoreControlsBundle\"] = window[\"wpCoreControlsBundle\"] || []).push([[8],{\n\n/***/ 521:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _util_events_EventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);\n/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(439);\n/* harmony import */ var _util_resetImageOrientation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(248);\n/* harmony import */ var _util_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(22);\n\n\n\n\n\nvar exports = window;\n/**\n * LocalPdfPartRetriever retrieves Document data from a local file.\n * <br/><br/>\n * <b>Note</b>: As of version 6.0, directly constructing a part retriever is deprecated and the capability will be removed in a future version. Please use the {@link Core.PartRetrievers#getPartRetriever} function instead.\n * @class Represents a local pdf document retriever.\n * @name LocalPdfPartRetriever\n * @memberof Core.PartRetrievers\n * @param {Object} file The file to load.\n * @ignore\n */\nvar LocalPdfPartRetriever = /** @class */ (function () {\n    function LocalPdfPartRetriever(file) {\n        var _this = this;\n        this.isImageFile = function (file) { return file && ((file.type.split('/')[0].toLowerCase() === 'image') || (file.name && !!file.name.match(/.(jpg|jpeg|png|gif)$/i))); };\n        this.file = file;\n        this.isProcessing = new Promise(function (resolve) { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __awaiter */ \"b\"])(_this, void 0, void 0, function () {\n            var arrayBuffer;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __generator */ \"d\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isImageFile(this.file)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Object(_util_resetImageOrientation__WEBPACK_IMPORTED_MODULE_3__[/* resetOrientationAsArrayBuffer */ \"b\"])(file)];\n                    case 1:\n                        arrayBuffer = _a.sent();\n                        if (_util_helpers__WEBPACK_IMPORTED_MODULE_4__[/* ie */ \"q\"]) {\n                            this.file = new Blob([arrayBuffer], { type: file.type });\n                        }\n                        else {\n                            this.file = new File([arrayBuffer], file === null || file === void 0 ? void 0 : file.name, { type: file.type });\n                        }\n                        _a.label = 2;\n                    case 2:\n                        resolve(true);\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    }\n    // Requires callback to be non-null\n    LocalPdfPartRetriever.prototype.getFileData = function (callback) {\n        var me = this;\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            me.trigger(LocalPdfPartRetriever['Events']['DOCUMENT_LOADING_PROGRESS'], [e.loaded, e.loaded]);\n            callback(new Uint8Array(e.target.result));\n        };\n        reader.onprogress = function (e) {\n            if (e.lengthComputable) {\n                me.trigger(LocalPdfPartRetriever['Events']['DOCUMENT_LOADING_PROGRESS'], [e.loaded, e.total > 0 ? e.total : 0]);\n            }\n        };\n        reader.readAsArrayBuffer(this.file);\n    };\n    LocalPdfPartRetriever.prototype.getFile = function () {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __awaiter */ \"b\"])(this, void 0, Promise, function () {\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __generator */ \"d\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.isProcessing];\n                    case 1:\n                        _a.sent();\n                        // @ts-ignore TODO-TS replace this with API\n                        if (exports.Core.isJSWorker) {\n                            // @ts-ignore file.path isnt a thing but idk so... :)\n                            return [2 /*return*/, this.file.path];\n                        }\n                        return [2 /*return*/, this.file];\n                }\n            });\n        });\n    };\n    LocalPdfPartRetriever['Events'] = {\n        'DOCUMENT_LOADING_PROGRESS': 'documentLoadingProgress'\n    };\n    return LocalPdfPartRetriever;\n}());\nObject(_util_events_EventHandler__WEBPACK_IMPORTED_MODULE_1__[/* useEventHandler */ \"a\"])(LocalPdfPartRetriever);\nObject(_Exports__WEBPACK_IMPORTED_MODULE_2__[/* exportEventHandler */ \"a\"])(LocalPdfPartRetriever);\nObject(_Exports__WEBPACK_IMPORTED_MODULE_2__[/* exportPartRetrieverFunctions */ \"b\"])(LocalPdfPartRetriever);\n/* harmony default export */ __webpack_exports__[\"default\"] = (LocalPdfPartRetriever);\n\n\n/***/ })\n\n}]);","import EventHandler, { useEventHandler } from '../../util/events/EventHandler';\nimport { exportEventHandler, exportPartRetrieverFunctions } from '../Exports';\nimport { resetOrientationAsArrayBuffer } from '../../util/resetImageOrientation';\nimport { ie } from '../../util/helpers';\n\nconst exports = window;\n\n/**\n * LocalPdfPartRetriever retrieves Document data from a local file.\n * <br/><br/>\n * <b>Note</b>: As of version 6.0, directly constructing a part retriever is deprecated and the capability will be removed in a future version. Please use the {@link Core.PartRetrievers#getPartRetriever} function instead.\n * @class Represents a local pdf document retriever.\n * @name LocalPdfPartRetriever\n * @memberof Core.PartRetrievers\n * @param {Object} file The file to load.\n * @ignore\n */\nclass LocalPdfPartRetriever {\n  file: File;\n\n  static 'Events' = {\n    'DOCUMENT_LOADING_PROGRESS': 'documentLoadingProgress'\n  } as const;\n\n  private isProcessing: Promise<boolean>;\n\n  constructor(file: File) {\n    this.file = file;\n    this.isProcessing = new Promise(async (resolve) => {\n      if (this.isImageFile(this.file)) {\n        const arrayBuffer = await resetOrientationAsArrayBuffer(file);\n        if (ie) {\n          this.file = new Blob([arrayBuffer], { type: file.type });\n        } else {\n          this.file = new File([arrayBuffer], file?.name, { type: file.type });\n        }\n      }\n      resolve(true);\n    });\n  }\n\n  // Requires callback to be non-null\n  getFileData(callback: (data: Uint8Array) => void) {\n    const me = this;\n    const reader = new FileReader();\n    reader.onload = function(e) {\n      me.trigger(LocalPdfPartRetriever['Events']['DOCUMENT_LOADING_PROGRESS'], [e.loaded, e.loaded]);\n      callback(new Uint8Array(e.target.result as ArrayBuffer));\n    };\n    reader.onprogress = function(e) {\n      if (e.lengthComputable) {\n        me.trigger(LocalPdfPartRetriever['Events']['DOCUMENT_LOADING_PROGRESS'], [e.loaded, e.total > 0 ? e.total : 0]);\n      }\n    };\n    reader.readAsArrayBuffer(this.file);\n  }\n\n  async getFile(): Promise<File> {\n    await this.isProcessing;\n    // @ts-ignore TODO-TS replace this with API\n    if (exports.Core.isJSWorker) {\n      // @ts-ignore file.path isnt a thing but idk so... :)\n      return this.file.path;\n    }\n    return this.file;\n  }\n\n  private isImageFile = (file: File) => file && ((file.type.split('/')[0].toLowerCase() === 'image') || (file.name && !!file.name.match(/.(jpg|jpeg|png|gif)$/i)));\n}\n\ntype LocalPdfPartRetrieverEvents = {\n  [LocalPdfPartRetriever.Events.DOCUMENT_LOADING_PROGRESS]: [number, number];\n}\n\ninterface LocalPdfPartRetriever extends EventHandler<LocalPdfPartRetrieverEvents> { }\nuseEventHandler(LocalPdfPartRetriever);\n\nexportEventHandler(LocalPdfPartRetriever);\nexportPartRetrieverFunctions(LocalPdfPartRetriever);\n\nexport default LocalPdfPartRetriever;\n"],"mappings":";AAAA;AC8BA;AAwBA;","sourceRoot":""}