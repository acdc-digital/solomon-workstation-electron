{"version":3,"file":"AzurePartRetriever.chunk.js","sources":["webpack:///AzurePartRetriever.chunk.js","webpack:///./src/core/src/namespaces/PartRetrievers/AzurePartRetriever.ts"],"sourcesContent":["(window[\"wpCoreControlsBundle\"] = window[\"wpCoreControlsBundle\"] || []).push([[3],{\n\n/***/ 524:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _util_constants_zipfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(177);\n/* harmony import */ var _HttpPartRetriever__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(518);\n/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(439);\n\n\n\n\n/**\n * Constructs a new AzurePartRetriever.\n * AzurePartRetriever retrieves Document parts asynchronously from a .xod file that exists on a Microsoft Azure server (though it works for other servers as well)\n * <br/><br/>\n * <b>Note</b>: As of version 6.0, directly constructing a part retriever is deprecated and the capability will be removed in a future version. Please use the {@link Core.PartRetrievers#getPartRetriever} function instead.\n *\n * @class Represents a http part retriever.\n * @name AzurePartRetriever\n * @extends Core.PartRetrievers.HttpPartRetriever\n * @memberof Core.PartRetrievers\n * @param {string} url The URL of the file to load. May be relative to the current page.\n * @param {Core.PartRetrievers.CacheHinting} cacheHint The type of cache hinting to use\n * @param {function} decrypt Function to be called to decrypt a part of the file\n * @param {Object} decryptOptions An object with options for the decryption e.g. {p: \"pass\", type: \"aes\"} where is p is the password\n * @ignore\n */\nvar AzurePartRetriever = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __extends */ \"c\"])(AzurePartRetriever, _super);\n    function AzurePartRetriever(url, cacheHint, decrypt, decryptOptions) {\n        return _super.call(this, url, cacheHint, decrypt, decryptOptions) || this;\n    }\n    AzurePartRetriever.prototype.getEndHeaderRange = function () {\n        return {\n            start: this.fileLength - _util_constants_zipfile__WEBPACK_IMPORTED_MODULE_1__[/* EndHeaderSize */ \"a\"],\n            stop: this.fileLength,\n        };\n    };\n    // For Microsoft Azure Blob storage they don't support range requests of the form \"-endByte\" (see http://msdn.microsoft.com/en-us/library/azure/ee691967.aspx)\n    // To workaround this we first make a range request for 0-0 to get the Content-Range which will tell us the file size\n    // Then we can manually select the last bytes for the initial central directory request\n    AzurePartRetriever.prototype.loadHeaders = function (callback) {\n        var _this = this;\n        this.loadRange(this.url, {\n            start: 0,\n            stop: 1,\n        }, function (err, data, rangeRequest) {\n            if (err) {\n                return callback(err);\n            }\n            var xhr = rangeRequest.request;\n            var contentRange = xhr.getResponseHeader('Content-Range');\n            // parse the content range to get the length of the file\n            _this.fileLength = contentRange.split('/')[1];\n            _super.prototype.loadHeaders.call(_this, callback);\n        });\n    };\n    return AzurePartRetriever;\n}(_HttpPartRetriever__WEBPACK_IMPORTED_MODULE_2__[\"default\"]));\nObject(_Exports__WEBPACK_IMPORTED_MODULE_3__[/* exportEventHandler */ \"a\"])(AzurePartRetriever);\nObject(_Exports__WEBPACK_IMPORTED_MODULE_3__[/* exportPartRetrieverFunctions */ \"b\"])(AzurePartRetriever);\n/* harmony default export */ __webpack_exports__[\"default\"] = (AzurePartRetriever);\n\n\n/***/ })\n\n}]);","import { EndHeaderSize } from '../../util/constants/zipfile';\nimport HttpPartRetriever, { ByteRequestCallback } from './HttpPartRetriever';\nimport { CacheHinting } from './constants';\nimport { PartRetrieverDecrypt, PartRetrieverDecryptOptions } from './PartRetriever';\nimport { exportEventHandler, exportPartRetrieverFunctions } from '../Exports';\n\n/**\n * Constructs a new AzurePartRetriever.\n * AzurePartRetriever retrieves Document parts asynchronously from a .xod file that exists on a Microsoft Azure server (though it works for other servers as well)\n * <br/><br/>\n * <b>Note</b>: As of version 6.0, directly constructing a part retriever is deprecated and the capability will be removed in a future version. Please use the {@link Core.PartRetrievers#getPartRetriever} function instead.\n *\n * @class Represents a http part retriever.\n * @name AzurePartRetriever\n * @extends Core.PartRetrievers.HttpPartRetriever\n * @memberof Core.PartRetrievers\n * @param {string} url The URL of the file to load. May be relative to the current page.\n * @param {Core.PartRetrievers.CacheHinting} cacheHint The type of cache hinting to use\n * @param {function} decrypt Function to be called to decrypt a part of the file\n * @param {Object} decryptOptions An object with options for the decryption e.g. {p: \"pass\", type: \"aes\"} where is p is the password\n * @ignore\n */\nclass AzurePartRetriever extends HttpPartRetriever {\n  fileLength?: number;\n\n  constructor(url: string, cacheHint: CacheHinting, decrypt: PartRetrieverDecrypt, decryptOptions: PartRetrieverDecryptOptions) {\n    super(url, cacheHint, decrypt, decryptOptions);\n  }\n\n  getEndHeaderRange() {\n    return {\n      start: this.fileLength - EndHeaderSize,\n      stop: this.fileLength,\n    };\n  }\n\n  // For Microsoft Azure Blob storage they don't support range requests of the form \"-endByte\" (see http://msdn.microsoft.com/en-us/library/azure/ee691967.aspx)\n  // To workaround this we first make a range request for 0-0 to get the Content-Range which will tell us the file size\n  // Then we can manually select the last bytes for the initial central directory request\n  loadHeaders(callback: ByteRequestCallback) {\n    this.loadRange(this.url, {\n      start: 0,\n      stop: 1,\n    }, (err, data, rangeRequest) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const xhr = rangeRequest.request;\n      const contentRange = xhr.getResponseHeader('Content-Range');\n      // parse the content range to get the length of the file\n      this.fileLength = contentRange.split('/')[1];\n\n      super.loadHeaders(callback);\n    });\n  }\n}\n\nexportEventHandler(AzurePartRetriever);\nexportPartRetrieverFunctions(AzurePartRetriever);\n\nexport default AzurePartRetriever;\n"],"mappings":";AAAA;ACqDA;","sourceRoot":""}