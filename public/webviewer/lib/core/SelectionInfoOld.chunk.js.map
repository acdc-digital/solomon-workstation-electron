{"version":3,"file":"SelectionInfoOld.chunk.js","sources":["webpack:///SelectionInfoOld.chunk.js","webpack:///./src/core/src/util/selectionInfo/old/SelectionInfoOld.ts","webpack:///./src/core/src/util/selectionInfo/old/LineOld.ts","webpack:///./src/core/src/util/selectionInfo/old/WordOld.ts"],"sourcesContent":["(window[\"wpCoreControlsBundle\"] = window[\"wpCoreControlsBundle\"] || []).push([[10],{\n\n/***/ 536:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _LineOld__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(546);\n/* harmony import */ var _ArrayEnumerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(138);\n/* harmony import */ var _helpers_arrayHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(48);\n/* harmony import */ var _namespaces_XMLParser_XMLParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84);\n\n\n\n\n// used to be XODTextOld.SelectionInfo\nvar SelectionInfoOld = /** @class */ (function () {\n    function SelectionInfoOld() {\n        this.m_Struct = null;\n        this.m_Str = null;\n        this.m_Offsets = null;\n        this.m_Quads = null;\n        this.m_Ready = false;\n    }\n    SelectionInfoOld.prototype.clear = function () {\n        Object(_helpers_arrayHelper__WEBPACK_IMPORTED_MODULE_2__[/* clearArray */ \"b\"])(this.m_Struct);\n        this.m_Str = '';\n        Object(_helpers_arrayHelper__WEBPACK_IMPORTED_MODULE_2__[/* clearArray */ \"b\"])(this.m_Offsets);\n        Object(_helpers_arrayHelper__WEBPACK_IMPORTED_MODULE_2__[/* clearArray */ \"b\"])(this.m_Quads);\n        this.m_Ready = false;\n    };\n    SelectionInfoOld.prototype.initDefault = function () {\n        this.m_Struct = [];\n        this.m_Offsets = [];\n        this.m_Quads = [];\n        this.m_Ready = false;\n    };\n    SelectionInfoOld.prototype._getUnicodeString = function (bytes) {\n        var result = '';\n        var i = 0;\n        var c = 0;\n        var c2 = 0;\n        var c3 = 0;\n        while (i < bytes.length) {\n            c = bytes.charCodeAt(i);\n            if (c === 9) {\n                result += String.fromCharCode(10);\n                i++;\n            }\n            else if (c < 128) {\n                result += String.fromCharCode(c);\n                i++;\n            }\n            else if ((c > 191) && (c < 224)) {\n                c2 = bytes.charCodeAt(i + 1);\n                result += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            }\n            else {\n                c2 = bytes.charCodeAt(i + 1);\n                c3 = bytes.charCodeAt(i + 2);\n                result += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                i += 3;\n            }\n        }\n        return result;\n    };\n    SelectionInfoOld.prototype.initData = function (contents) {\n        this.m_Struct = [];\n        this.m_Offsets = [];\n        this.m_Quads = [];\n        this.m_Ready = false;\n        try {\n            var parser = new _namespaces_XMLParser_XMLParser__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"](contents);\n            this.m_Str = '';\n            parser.increaseDepth();\n            if (!parser.advance()) {\n                return;\n            }\n            var str = parser.getCharData();\n            str = this._getUnicodeString(str);\n            this.m_Str = str;\n            Object(_helpers_arrayHelper__WEBPACK_IMPORTED_MODULE_2__[/* clearArray */ \"b\"])(this.m_Offsets);\n            parser.advance();\n            str = parser.getCharData();\n            var strings = str.split(',');\n            var $enum1 = Object(_ArrayEnumerator__WEBPACK_IMPORTED_MODULE_1__[/* getEnumerator */ \"a\"])(strings);\n            while ($enum1.moveNext()) {\n                var s = $enum1.current;\n                try {\n                    var i = parseInt(s.trim(), 10);\n                    this.m_Offsets.push(i);\n                }\n                catch ($e2) {\n                }\n            }\n            Object(_helpers_arrayHelper__WEBPACK_IMPORTED_MODULE_2__[/* clearArray */ \"b\"])(this.m_Struct);\n            parser.advance();\n            str = parser.getCharData();\n            strings = str.split(',');\n            var $enum3 = Object(_ArrayEnumerator__WEBPACK_IMPORTED_MODULE_1__[/* getEnumerator */ \"a\"])(strings);\n            while ($enum3.moveNext()) {\n                var s = $enum3.current;\n                try {\n                    var i = parseFloat(s.trim());\n                    this.m_Struct.push(i);\n                }\n                catch ($e4) {\n                }\n            }\n            Object(_helpers_arrayHelper__WEBPACK_IMPORTED_MODULE_2__[/* clearArray */ \"b\"])(this.m_Quads);\n            parser.advance();\n            str = parser.getCharData();\n            strings = str.split(',');\n            var quads = [];\n            var modes = [];\n            var mode = 0;\n            var $enum5 = Object(_ArrayEnumerator__WEBPACK_IMPORTED_MODULE_1__[/* getEnumerator */ \"a\"])(strings);\n            while ($enum5.moveNext()) {\n                var s = $enum5.current;\n                switch (s) {\n                    case 'Q':\n                        mode = 1;\n                        break;\n                    case 'R':\n                        mode = 2;\n                        break;\n                    case 'S':\n                        mode = 3;\n                        break;\n                    default:\n                        mode = 0;\n                        break;\n                }\n                if (mode) {\n                    quads.push(0);\n                    modes.push(mode);\n                }\n                else {\n                    try {\n                        var i = parseFloat(s.trim());\n                        quads.push(i);\n                        modes.push(mode);\n                    }\n                    catch ($e6) {\n                        return;\n                    }\n                }\n            }\n            mode = 0;\n            var sz = quads.length;\n            var x1 = void 0;\n            var y1 = void 0;\n            var x2 = void 0;\n            var y2 = void 0;\n            var cmn_y1 = 0;\n            var cmn_y2 = 0;\n            var pos = 0;\n            while (pos < sz) {\n                var m = modes[pos];\n                if (m > 0) {\n                    mode = m;\n                    ++pos;\n                    if (mode === 3) {\n                        cmn_y1 = quads[pos];\n                        cmn_y2 = quads[pos + 1];\n                        pos += 2;\n                    }\n                    continue;\n                }\n                if (mode === 1) {\n                    for (var i = 0; i < 8; ++i) {\n                        this.m_Quads.push(quads[pos++]);\n                    }\n                }\n                else if (mode === 2) {\n                    x1 = quads[pos++];\n                    y1 = quads[pos++];\n                    x2 = quads[pos++];\n                    y2 = quads[pos++];\n                    this.m_Quads.push(x1);\n                    this.m_Quads.push(y1);\n                    this.m_Quads.push(x2);\n                    this.m_Quads.push(y1);\n                    this.m_Quads.push(x2);\n                    this.m_Quads.push(y2);\n                    this.m_Quads.push(x1);\n                    this.m_Quads.push(y2);\n                }\n                else if (mode === 3) {\n                    x1 = quads[pos++];\n                    y1 = cmn_y1;\n                    x2 = quads[pos++];\n                    y2 = cmn_y2;\n                    this.m_Quads.push(x1);\n                    this.m_Quads.push(y1);\n                    this.m_Quads.push(x2);\n                    this.m_Quads.push(y1);\n                    this.m_Quads.push(x2);\n                    this.m_Quads.push(y2);\n                    this.m_Quads.push(x1);\n                    this.m_Quads.push(y2);\n                }\n            }\n        }\n        catch (ex) {\n            return;\n        }\n        if (!this.m_Str.length || this.m_Str.length !== this.m_Offsets.length || this.m_Str.length * 8 !== this.m_Quads.length) {\n            return;\n        }\n        this.m_Ready = true;\n    };\n    SelectionInfoOld.prototype.ready = function () {\n        return this.m_Ready;\n    };\n    SelectionInfoOld.prototype.getNumLines = function () {\n        // / <returns type=\"Number\" integer=\"true\"></returns>\n        if (!this.m_Struct.length) {\n            return 0;\n        }\n        // @ts-ignore\n        return parseInt(this.m_Struct[0], 10);\n    };\n    SelectionInfoOld.prototype.getFirstLine = function () {\n        var tmpLine = new _LineOld__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]();\n        if (!this.m_Struct.length) {\n            tmpLine.initMembers(this.m_Struct, -1, this.m_Str, this.m_Quads, 0);\n            return tmpLine;\n        }\n        tmpLine.initMembers(this.m_Struct, 1, this.m_Str, this.m_Quads, 1);\n        return tmpLine;\n    };\n    SelectionInfoOld.prototype.getStruct = function () {\n        return this.m_Struct;\n    };\n    SelectionInfoOld.prototype.getStr = function () {\n        return this.m_Str;\n    };\n    SelectionInfoOld.prototype.getOffsets = function () {\n        return this.m_Offsets;\n    };\n    SelectionInfoOld.prototype.getQuads = function () {\n        return this.m_Quads;\n    };\n    SelectionInfoOld.prototype.getData = function () {\n        return {\n            'm_Struct': this.m_Struct,\n            'm_Str': this.m_Str,\n            'm_Offsets': this.m_Offsets,\n            'm_Quads': this.m_Quads,\n            'm_Ready': this.m_Ready,\n        };\n    };\n    return SelectionInfoOld;\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (SelectionInfoOld);\n\n\n/***/ }),\n\n/***/ 546:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(102);\n/* harmony import */ var _SelectionPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60);\n/* harmony import */ var _WordOld__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(558);\n\n\n\nvar LineOld = /** @class */ (function () {\n    function LineOld() {\n        this._m_Pos = 0;\n        this._m_Struct = null;\n        this._m_Str = null;\n        this._m_Quads = null;\n        this._m_CurNum = 0;\n        this._m_Direction = null;\n    }\n    LineOld.prototype.initDefault = function () {\n        this._m_Pos = -1;\n        this._m_CurNum = 0;\n        this._m_Direction = [];\n    };\n    LineOld.prototype.initMembers = function (struct_vec, start_pos, str, quads, cn) {\n        this._m_Pos = start_pos;\n        this._m_CurNum = cn;\n        this._m_Direction = [];\n        this._m_Struct = struct_vec;\n        this._m_Str = str;\n        this._m_Quads = quads;\n    };\n    LineOld.prototype.initLine = function (line) {\n        this._m_Pos = line._m_Pos;\n        this._m_CurNum = line._m_CurNum;\n        this._m_Direction = line._m_Direction;\n        this._m_Struct = line._m_Struct;\n        this._m_Str = line._m_Str;\n        this._m_Quads = line._m_Quads;\n    };\n    LineOld.prototype.equal = function (line) {\n        return this._m_Pos === line._m_Pos;\n    };\n    LineOld.prototype.getNumWords = function () {\n        return Math.abs(this._m_Struct[this._m_Pos]);\n    };\n    LineOld.prototype.isSimple = function () {\n        return (this._m_Struct[this._m_Pos] > 0);\n    };\n    LineOld.prototype.getFirstWord = function () {\n        var off = (this.isSimple()) ? 6 : 10;\n        var tmpWord = new _WordOld__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]();\n        tmpWord.initMembers(this._m_Struct, this._m_Pos + off, this._m_Pos, this._m_Str, this._m_Quads, 1);\n        return tmpWord;\n    };\n    LineOld.prototype.getWord = function (word_idx) {\n        if (word_idx < 0 || word_idx >= this.getNumWords()) {\n            var tmpWord_1 = new _WordOld__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]();\n            tmpWord_1.initMembers(this._m_Struct, -1, -1, this._m_Str, this._m_Quads, 0);\n            return tmpWord_1;\n        }\n        var basic_off = (this.isSimple()) ? 6 : 10;\n        var word_length = (this.isSimple()) ? 5 : 11;\n        var tmpWord = new _WordOld__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]();\n        tmpWord.initMembers(this._m_Struct, this._m_Pos + basic_off + word_length * word_idx, this._m_Pos, this._m_Str, this._m_Quads, 1 + word_idx);\n        return tmpWord;\n    };\n    LineOld.prototype.getNextLine = function () {\n        // @ts-ignore\n        var nxt_line_start = this._m_Pos + parseInt(this._m_Struct[this._m_Pos + 1], 10);\n        if (nxt_line_start >= this._m_Struct.length) {\n            var tmpLine_1 = new LineOld();\n            tmpLine_1.initMembers(this._m_Struct, -1, this._m_Str, this._m_Quads, 0);\n            return tmpLine_1;\n        }\n        var tmpLine = new LineOld();\n        tmpLine.initMembers(this._m_Struct, nxt_line_start, this._m_Str, this._m_Quads, this._m_CurNum + 1);\n        return tmpLine;\n    };\n    // TODO-TS where did this go - should be XODTextOld.SelectionRect\n    LineOld.prototype.getBBox = function (bbox) {\n        if (this.isSimple()) {\n            bbox.x1 = this._m_Struct[this._m_Pos + 2 + 0];\n            bbox.y1 = this._m_Struct[this._m_Pos + 2 + 1];\n            bbox.x2 = this._m_Struct[this._m_Pos + 2 + 2];\n            bbox.y2 = this._m_Struct[this._m_Pos + 2 + 3];\n        }\n        else {\n            var min_x = 1.79769E+308;\n            var max_x = _constants__WEBPACK_IMPORTED_MODULE_0__[/* doubleData */ \"a\"].MIN;\n            var min_y = 1.79769E+308;\n            var max_y = _constants__WEBPACK_IMPORTED_MODULE_0__[/* doubleData */ \"a\"].MIN;\n            for (var i = 0; i < 4; ++i) {\n                var x = this._m_Struct[this._m_Pos + 2 + i * 2];\n                var y = this._m_Struct[this._m_Pos + 2 + i * 2 + 1];\n                min_x = Math.min(min_x, x);\n                max_x = Math.max(max_x, x);\n                min_y = Math.min(min_y, y);\n                max_y = Math.max(max_y, y);\n            }\n            bbox.x1 = min_x;\n            bbox.y1 = min_y;\n            bbox.x2 = max_x;\n            bbox.y2 = max_y;\n        }\n    };\n    LineOld.prototype.getCurrentNum = function () {\n        return this._m_CurNum;\n    };\n    LineOld.prototype.getDirection = function () {\n        if (!this._m_Direction.length) {\n            var g1 = new _SelectionPoint__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]();\n            var g2 = new _SelectionPoint__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]();\n            var wend = new _WordOld__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]();\n            wend.initDefault();\n            var w1 = this.getFirstWord();\n            var w2 = new _WordOld__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]();\n            w2.initDefault();\n            for (var word = this.getFirstWord(); !word.equal(wend); word = word.getNextWord()) {\n                w2 = word;\n            }\n            var q1 = new Array(8);\n            var q2 = new Array(8);\n            w1.getGlyphQuad(0, q1);\n            g1.x = (q1[0] + q1[2] + q1[4] + q1[6]) / 4;\n            g1.y = (q1[1] + q1[3] + q1[5] + q1[7]) / 4;\n            w2.getGlyphQuad(w2.getNumGlyphs() - 1, q2);\n            g2.x = (q2[0] + q2[2] + q2[4] + q2[6]) / 4;\n            g2.y = (q2[1] + q2[3] + q2[5] + q2[7]) / 4;\n            if (Math.abs(g1.x - g2.x) < 0.01 && Math.abs(g1.y - g2.y) < 0.01) {\n                this._m_Direction.push(0);\n            }\n            var dir = Math.atan2(g2.y - g1.y, g2.x - g1.x);\n            dir *= 180 / 3.1415926;\n            if (dir < 0) {\n                dir += 360;\n            }\n            this._m_Direction.push(dir);\n        }\n        else {\n            return this._m_Direction[0];\n        }\n        return 0;\n    };\n    return LineOld;\n}());\n/* harmony default export */ __webpack_exports__[\"a\"] = (LineOld);\n\n\n/***/ }),\n\n/***/ 558:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _LineOld__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(546);\n/* harmony import */ var _SelectionRect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(114);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(102);\n\n\n\nvar WordOld = /** @class */ (function () {\n    function WordOld() {\n        this.m_Pos = 0;\n        this._m_LPos = 0;\n        this.m_Struct = null;\n        this._m_Str = null;\n        this._m_Quads = null;\n        this._m_CurNum = 0;\n    }\n    WordOld.prototype.initDefault = function () {\n        this.m_Pos = -1;\n        this._m_LPos = -1;\n        this._m_CurNum = 0;\n    };\n    WordOld.prototype.initMembers = function (strct, start_pos, line_start_pos, str, quads, cn) {\n        this.m_Pos = start_pos;\n        this._m_LPos = line_start_pos;\n        this.m_Struct = strct;\n        this._m_Str = str;\n        this._m_Quads = quads;\n        this._m_CurNum = cn;\n    };\n    WordOld.prototype.initWord = function (w) {\n        this.m_Pos = w.m_Pos;\n        this._m_LPos = w.m_Pos;\n        this._m_CurNum = w._m_CurNum;\n        this.m_Struct = w.m_Struct;\n        this._m_Str = w._m_Str;\n        this._m_Quads = w._m_Quads;\n    };\n    WordOld.prototype.equal = function (word) {\n        return this.m_Pos === word.m_Pos;\n    };\n    WordOld.prototype.getNumGlyphs = function () {\n        // @ts-ignore\n        return parseInt(this.m_Struct[this.m_Pos], 10);\n    };\n    WordOld.prototype.getStringLen = function () {\n        // @ts-ignore\n        return parseInt(this.m_Struct[this.m_Pos + 2], 10);\n    };\n    WordOld.prototype.getStringPos = function () {\n        // @ts-ignore\n        return parseInt(this.m_Struct[this.m_Pos + 1], 10);\n    };\n    WordOld.prototype.isSimple = function () {\n        return (this.m_Struct[this._m_LPos] > 0);\n    };\n    WordOld.prototype.getParentLineWordNum = function () {\n        return Math.abs(this.m_Struct[this._m_LPos]);\n    };\n    WordOld.prototype.getNextWord = function () {\n        var simple = this.isSimple();\n        var word_len = (simple) ? 5 : 11;\n        var basic_line_off = (simple) ? 6 : 10;\n        var num_words = this.getParentLineWordNum();\n        var last_word_start = this._m_LPos + basic_line_off + (num_words - 1) * word_len;\n        if (this.m_Pos >= last_word_start) {\n            var tmpWord_1 = new WordOld();\n            tmpWord_1.initMembers(this.m_Struct, -1, -1, this._m_Str, this._m_Quads, 0);\n            return tmpWord_1;\n        }\n        var tmpWord = new WordOld();\n        tmpWord.initMembers(this.m_Struct, this.m_Pos + word_len, this._m_LPos, this._m_Str, this._m_Quads, this._m_CurNum + 1);\n        return tmpWord;\n    };\n    WordOld.prototype.getGlyphGlobalPos = function (id) {\n        var num = this.getNumGlyphs();\n        if (id < 0 || id >= num) {\n            return -1;\n        }\n        // @ts-ignore\n        return parseInt(this.m_Struct[this.m_Pos + 1], 10) + id;\n    };\n    WordOld.prototype.getGlyphQuad = function (glyph_idx, quad) {\n        var gid = this.getGlyphGlobalPos(glyph_idx);\n        if (gid < 0) {\n            return;\n        }\n        var l = new _LineOld__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]();\n        l.initMembers(this.m_Struct, this._m_LPos, this._m_Str, this._m_Quads, 0);\n        if (l.isSimple()) {\n            var b = new _SelectionRect__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]();\n            l.getBBox(b);\n            var y_low = (b.y1 < b.y2) ? b.y1 : b.y2;\n            var y_top = (b.y1 > b.y2) ? b.y1 : b.y2;\n            var q_str_id = 8 * gid;\n            quad[0] = this._m_Quads[q_str_id];\n            quad[1] = y_low;\n            quad[2] = this._m_Quads[q_str_id + 2];\n            quad[3] = quad[1];\n            quad[4] = this._m_Quads[q_str_id + 4];\n            quad[5] = y_top;\n            quad[6] = this._m_Quads[q_str_id + 6];\n            quad[7] = quad[5];\n        }\n        else {\n            var q_str_id = 8 * gid;\n            for (var i = 0; i < 8; ++i) {\n                quad[i] = this._m_Quads[q_str_id + i];\n            }\n        }\n    };\n    WordOld.prototype.getQuad = function (quad) {\n        var l = new _LineOld__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]();\n        l.initMembers(this.m_Struct, this._m_LPos, this._m_Str, this._m_Quads, 0);\n        if (l.isSimple()) {\n            var x_left = this.m_Struct[this.m_Pos + 3];\n            var x_right = this.m_Struct[this.m_Pos + 4];\n            if (x_left > x_right) {\n                var temp = x_left;\n                x_left = x_right;\n                x_right = temp;\n            }\n            var b = new _SelectionRect__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]();\n            l.getBBox(b);\n            var y_low = (b.y1 < b.y2) ? b.y1 : b.y2;\n            var y_top = (b.y1 > b.y2) ? b.y1 : b.y2;\n            quad[0] = x_left;\n            quad[1] = y_low;\n            quad[2] = x_right;\n            quad[3] = y_low;\n            quad[4] = x_right;\n            quad[5] = y_top;\n            quad[6] = x_left;\n            quad[7] = y_top;\n        }\n        else {\n            var start = this.m_Pos + 3;\n            for (var i = 0; i < 8; ++i) {\n                quad[i] = this.m_Struct[start + i];\n            }\n        }\n    };\n    WordOld.prototype.getBBox = function (bbox) {\n        var l = new _LineOld__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]();\n        l.initMembers(this.m_Struct, this._m_LPos, this._m_Str, this._m_Quads, 0);\n        if (l.isSimple()) {\n            var x_left = this.m_Struct[this.m_Pos + 3];\n            var x_right = this.m_Struct[this.m_Pos + 4];\n            if (x_left > x_right) {\n                var temp = x_left;\n                x_left = x_right;\n                x_right = temp;\n            }\n            var b = new _SelectionRect__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]();\n            l.getBBox(b);\n            var y1 = (b.y1 < b.y2) ? b.y1 : b.y2;\n            var y2 = (b.y1 > b.y2) ? b.y1 : b.y2;\n            bbox[0] = x_left;\n            bbox[1] = y1;\n            bbox[2] = x_right;\n            bbox[3] = y2;\n        }\n        else {\n            var min_x = 1.79769E+308;\n            var max_x = _constants__WEBPACK_IMPORTED_MODULE_2__[/* doubleData */ \"a\"].MIN;\n            var min_y = 1.79769E+308;\n            var max_y = _constants__WEBPACK_IMPORTED_MODULE_2__[/* doubleData */ \"a\"].MIN;\n            var start = this.m_Pos + 3;\n            for (var i = 0; i < 4; ++i) {\n                var x = this.m_Struct[start + i * 2];\n                var y = this.m_Struct[start + i * 2 + 1];\n                min_x = Math.min(min_x, x);\n                max_x = Math.max(max_x, x);\n                min_y = Math.min(min_y, y);\n                max_y = Math.max(max_y, y);\n            }\n            bbox[0] = min_x;\n            bbox[1] = min_y;\n            bbox[2] = max_x;\n            bbox[3] = max_y;\n        }\n    };\n    WordOld.prototype.getCurrentNum = function () {\n        return this._m_CurNum;\n    };\n    return WordOld;\n}());\n/* harmony default export */ __webpack_exports__[\"a\"] = (WordOld);\n\n\n/***/ })\n\n}]);","import LineOld from './LineOld';\nimport { getEnumerator } from '../../ArrayEnumerator';\nimport { clearArray } from '../../helpers/arrayHelper';\nimport XMLParser from '../../../namespaces/XMLParser/XMLParser';\n\nexport interface SelectionInfoOldDataType {\n  'm_Struct': Array<number>;\n  'm_Str': string;\n  'm_Offsets': Array<number>;\n  'm_Quads': Array<number>;\n  'm_Ready': boolean;\n}\n\n// used to be XODTextOld.SelectionInfo\nexport default class SelectionInfoOld {\n  m_Struct: Array<number>;\n\n  m_Str: string;\n\n  m_Offsets: Array<number>;\n\n  m_Quads: Array<number>;\n\n  m_Ready: boolean;\n\n  constructor() {\n    this.m_Struct = null;\n    this.m_Str = null;\n    this.m_Offsets = null;\n    this.m_Quads = null;\n    this.m_Ready = false;\n  }\n\n  clear() {\n    clearArray(this.m_Struct);\n    this.m_Str = '';\n    clearArray(this.m_Offsets);\n    clearArray(this.m_Quads);\n    this.m_Ready = false;\n  }\n\n  initDefault() {\n    this.m_Struct = [];\n    this.m_Offsets = [];\n    this.m_Quads = [];\n    this.m_Ready = false;\n  }\n\n  _getUnicodeString(bytes: string) {\n    let result = '';\n    let i = 0;\n    let c = 0;\n    let c2 = 0;\n    let c3 = 0;\n    while (i < bytes.length) {\n      c = bytes.charCodeAt(i);\n      if (c === 9) {\n        result += String.fromCharCode(10);\n        i++;\n      } else if (c < 128) {\n        result += String.fromCharCode(c);\n        i++;\n      } else if ((c > 191) && (c < 224)) {\n        c2 = bytes.charCodeAt(i + 1);\n        result += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n        i += 2;\n      } else {\n        c2 = bytes.charCodeAt(i + 1);\n        c3 = bytes.charCodeAt(i + 2);\n        result += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n        i += 3;\n      }\n    }\n    return result;\n  }\n\n  initData(contents: string) {\n    this.m_Struct = [];\n    this.m_Offsets = [];\n    this.m_Quads = [];\n    this.m_Ready = false;\n    try {\n      const parser = new XMLParser(contents);\n      this.m_Str = '';\n      parser.increaseDepth();\n      if (!parser.advance()) {\n        return;\n      }\n      let str = parser.getCharData();\n      str = this._getUnicodeString(str);\n      this.m_Str = str;\n      clearArray(this.m_Offsets);\n      parser.advance();\n      str = parser.getCharData();\n      let strings: string[] = str.split(',');\n      const $enum1 = getEnumerator<string>(strings);\n      while ($enum1.moveNext()) {\n        const s = $enum1.current;\n        try {\n          const i = parseInt(s.trim(), 10);\n          this.m_Offsets.push(i);\n        } catch ($e2) {\n        }\n      }\n      clearArray(this.m_Struct);\n      parser.advance();\n      str = parser.getCharData();\n      strings = str.split(',');\n      const $enum3 = getEnumerator<string>(strings);\n      while ($enum3.moveNext()) {\n        const s = $enum3.current;\n        try {\n          const i = parseFloat(s.trim());\n          this.m_Struct.push(i);\n        } catch ($e4) {\n        }\n      }\n      clearArray(this.m_Quads);\n      parser.advance();\n      str = parser.getCharData();\n      strings = str.split(',');\n      const quads: Array<number> = [];\n      const modes: Array<number> = [];\n      let mode = 0;\n      const $enum5 = getEnumerator<string>(strings);\n      while ($enum5.moveNext()) {\n        const s = $enum5.current;\n        switch (s) {\n          case 'Q':\n            mode = 1;\n            break;\n          case 'R':\n            mode = 2;\n            break;\n          case 'S':\n            mode = 3;\n            break;\n          default:\n            mode = 0;\n            break;\n        }\n        if (mode) {\n          quads.push(0);\n          modes.push(mode);\n        } else {\n          try {\n            const i = parseFloat(s.trim());\n            quads.push(i);\n            modes.push(mode);\n          } catch ($e6) {\n            return;\n          }\n        }\n      }\n      mode = 0;\n      const sz = quads.length;\n      let x1;\n      let y1;\n      let x2;\n      let y2;\n      let cmn_y1 = 0;\n      let cmn_y2 = 0;\n      let pos = 0;\n      while (pos < sz) {\n        const m = modes[pos];\n        if (m > 0) {\n          mode = m;\n          ++pos;\n          if (mode === 3) {\n            cmn_y1 = quads[pos];\n            cmn_y2 = quads[pos + 1];\n            pos += 2;\n          }\n          continue;\n        }\n        if (mode === 1) {\n          for (let i = 0; i < 8; ++i) {\n            this.m_Quads.push(quads[pos++]);\n          }\n        } else if (mode === 2) {\n          x1 = quads[pos++];\n          y1 = quads[pos++];\n          x2 = quads[pos++];\n          y2 = quads[pos++];\n          this.m_Quads.push(x1);\n          this.m_Quads.push(y1);\n          this.m_Quads.push(x2);\n          this.m_Quads.push(y1);\n          this.m_Quads.push(x2);\n          this.m_Quads.push(y2);\n          this.m_Quads.push(x1);\n          this.m_Quads.push(y2);\n        } else if (mode === 3) {\n          x1 = quads[pos++];\n          y1 = cmn_y1;\n          x2 = quads[pos++];\n          y2 = cmn_y2;\n          this.m_Quads.push(x1);\n          this.m_Quads.push(y1);\n          this.m_Quads.push(x2);\n          this.m_Quads.push(y1);\n          this.m_Quads.push(x2);\n          this.m_Quads.push(y2);\n          this.m_Quads.push(x1);\n          this.m_Quads.push(y2);\n        }\n      }\n    } catch (ex) {\n      return;\n    }\n    if (!this.m_Str.length || this.m_Str.length !== this.m_Offsets.length || this.m_Str.length * 8 !== this.m_Quads.length) {\n      return;\n    }\n    this.m_Ready = true;\n  }\n\n  ready() {\n    return this.m_Ready;\n  }\n\n  getNumLines() {\n    // / <returns type=\"Number\" integer=\"true\"></returns>\n    if (!this.m_Struct.length) {\n      return 0;\n    }\n    // @ts-ignore\n    return parseInt(this.m_Struct[0], 10);\n  }\n\n  getFirstLine() {\n    const tmpLine = new LineOld();\n    if (!this.m_Struct.length) {\n      tmpLine.initMembers(this.m_Struct, -1, this.m_Str, this.m_Quads, 0);\n      return tmpLine;\n    }\n    tmpLine.initMembers(this.m_Struct, 1, this.m_Str, this.m_Quads, 1);\n    return tmpLine;\n  }\n\n  getStruct() {\n    return this.m_Struct;\n  }\n\n  getStr() {\n    return this.m_Str;\n  }\n\n  getOffsets() {\n    return this.m_Offsets;\n  }\n\n  getQuads() {\n    return this.m_Quads;\n  }\n\n  getData(): SelectionInfoOldDataType {\n    return {\n      'm_Struct': this.m_Struct,\n      'm_Str': this.m_Str,\n      'm_Offsets': this.m_Offsets,\n      'm_Quads': this.m_Quads,\n      'm_Ready': this.m_Ready,\n    };\n  }\n}","import { doubleData } from '../constants';\nimport SelectionPoint from '../SelectionPoint';\nimport WordOld from './WordOld';\n\nexport default class LineOld {\n  _m_Pos: number;\n\n  _m_Struct: Array<number>;\n\n  _m_Str: string;\n\n  _m_Quads: Array<number>;\n\n  _m_CurNum: number;\n\n  _m_Direction: Array<number>;\n\n  constructor() {\n    this._m_Pos = 0;\n    this._m_Struct = null;\n    this._m_Str = null;\n    this._m_Quads = null;\n    this._m_CurNum = 0;\n    this._m_Direction = null;\n  }\n\n  initDefault() {\n    this._m_Pos = -1;\n    this._m_CurNum = 0;\n    this._m_Direction = [];\n  }\n\n  initMembers(struct_vec: Array<number>, start_pos: number, str: string, quads: Array<number>, cn: number) {\n    this._m_Pos = start_pos;\n    this._m_CurNum = cn;\n    this._m_Direction = [];\n    this._m_Struct = struct_vec;\n    this._m_Str = str;\n    this._m_Quads = quads;\n  }\n\n  initLine(line: LineOld) {\n    this._m_Pos = line._m_Pos;\n    this._m_CurNum = line._m_CurNum;\n    this._m_Direction = line._m_Direction;\n    this._m_Struct = line._m_Struct;\n    this._m_Str = line._m_Str;\n    this._m_Quads = line._m_Quads;\n  }\n\n  equal(line: LineOld) {\n    return this._m_Pos === line._m_Pos;\n  }\n\n  getNumWords() {\n    return Math.abs(this._m_Struct[this._m_Pos]);\n  }\n\n  isSimple() {\n    return (this._m_Struct[this._m_Pos] > 0);\n  }\n\n  getFirstWord() {\n    const off = (this.isSimple()) ? 6 : 10;\n    const tmpWord = new WordOld();\n    tmpWord.initMembers(this._m_Struct, this._m_Pos + off, this._m_Pos, this._m_Str, this._m_Quads, 1);\n    return tmpWord;\n  }\n\n  getWord(word_idx: number) {\n    if (word_idx < 0 || word_idx >= this.getNumWords()) {\n      const tmpWord = new WordOld();\n      tmpWord.initMembers(this._m_Struct, -1, -1, this._m_Str, this._m_Quads, 0);\n      return tmpWord;\n    }\n\n    const basic_off = (this.isSimple()) ? 6 : 10;\n    const word_length = (this.isSimple()) ? 5 : 11;\n    const tmpWord = new WordOld();\n    tmpWord.initMembers(this._m_Struct, this._m_Pos + basic_off + word_length * word_idx, this._m_Pos, this._m_Str, this._m_Quads, 1 + word_idx);\n    return tmpWord;\n  }\n\n  getNextLine() {\n    // @ts-ignore\n    const nxt_line_start = this._m_Pos + parseInt(this._m_Struct[this._m_Pos + 1], 10);\n    if (nxt_line_start >= this._m_Struct.length) {\n      const tmpLine = new LineOld();\n      tmpLine.initMembers(this._m_Struct, -1, this._m_Str, this._m_Quads, 0);\n      return tmpLine;\n    }\n\n    const tmpLine = new LineOld();\n    tmpLine.initMembers(this._m_Struct, nxt_line_start, this._m_Str, this._m_Quads, this._m_CurNum + 1);\n    return tmpLine;\n  }\n\n  // TODO-TS where did this go - should be XODTextOld.SelectionRect\n  getBBox(bbox: any) {\n    if (this.isSimple()) {\n      bbox.x1 = this._m_Struct[this._m_Pos + 2 + 0];\n      bbox.y1 = this._m_Struct[this._m_Pos + 2 + 1];\n      bbox.x2 = this._m_Struct[this._m_Pos + 2 + 2];\n      bbox.y2 = this._m_Struct[this._m_Pos + 2 + 3];\n    } else {\n      let min_x = 1.79769E+308;\n      let max_x = doubleData.MIN;\n      let min_y = 1.79769E+308;\n      let max_y = doubleData.MIN;\n      for (let i = 0; i < 4; ++i) {\n        const x = this._m_Struct[this._m_Pos + 2 + i * 2];\n        const y = this._m_Struct[this._m_Pos + 2 + i * 2 + 1];\n        min_x = Math.min(min_x, x);\n        max_x = Math.max(max_x, x);\n        min_y = Math.min(min_y, y);\n        max_y = Math.max(max_y, y);\n      }\n      bbox.x1 = min_x;\n      bbox.y1 = min_y;\n      bbox.x2 = max_x;\n      bbox.y2 = max_y;\n    }\n  }\n\n  getCurrentNum() {\n    return this._m_CurNum;\n  }\n\n  getDirection() {\n    if (!this._m_Direction.length) {\n      const g1 = new SelectionPoint();\n      const g2 = new SelectionPoint();\n      const wend = new WordOld();\n      wend.initDefault();\n      const w1 = this.getFirstWord();\n      let w2 = new WordOld();\n      w2.initDefault();\n      for (let word = this.getFirstWord(); !word.equal(wend); word = word.getNextWord()) {\n        w2 = word;\n      }\n      const q1 = new Array(8);\n      const q2 = new Array(8);\n      w1.getGlyphQuad(0, q1);\n      g1.x = (q1[0] + q1[2] + q1[4] + q1[6]) / 4;\n      g1.y = (q1[1] + q1[3] + q1[5] + q1[7]) / 4;\n      w2.getGlyphQuad(w2.getNumGlyphs() - 1, q2);\n      g2.x = (q2[0] + q2[2] + q2[4] + q2[6]) / 4;\n      g2.y = (q2[1] + q2[3] + q2[5] + q2[7]) / 4;\n      if (Math.abs(g1.x - g2.x) < 0.01 && Math.abs(g1.y - g2.y) < 0.01) {\n        this._m_Direction.push(0);\n      }\n      let dir = Math.atan2(g2.y - g1.y, g2.x - g1.x);\n      dir *= 180 / 3.1415926;\n      if (dir < 0) {\n        dir += 360;\n      }\n      this._m_Direction.push(dir);\n    } else {\n      return this._m_Direction[0];\n    }\n    return 0;\n  }\n}","import LineOld from './LineOld';\nimport SelectionRect from '../SelectionRect';\nimport { doubleData } from '../constants';\n\nexport default class WordOld {\n  m_Pos: number;\n\n  _m_LPos: number;\n\n  m_Struct: Array<number>;\n\n  _m_Str: string;\n\n  _m_Quads: Array<number>;\n\n  _m_CurNum: number;\n\n  constructor() {\n    this.m_Pos = 0;\n    this._m_LPos = 0;\n    this.m_Struct = null;\n    this._m_Str = null;\n    this._m_Quads = null;\n    this._m_CurNum = 0;\n  }\n\n  initDefault() {\n    this.m_Pos = -1;\n    this._m_LPos = -1;\n    this._m_CurNum = 0;\n  }\n\n  initMembers(strct: Array<number>, start_pos: number, line_start_pos: number, str: string, quads: Array<number>, cn: number) {\n    this.m_Pos = start_pos;\n    this._m_LPos = line_start_pos;\n    this.m_Struct = strct;\n    this._m_Str = str;\n    this._m_Quads = quads;\n    this._m_CurNum = cn;\n  }\n\n  initWord(w: WordOld) {\n    this.m_Pos = w.m_Pos;\n    this._m_LPos = w.m_Pos;\n    this._m_CurNum = w._m_CurNum;\n    this.m_Struct = w.m_Struct;\n    this._m_Str = w._m_Str;\n    this._m_Quads = w._m_Quads;\n  }\n\n  equal(word: WordOld) {\n    return this.m_Pos === word.m_Pos;\n  }\n\n  getNumGlyphs() {\n    // @ts-ignore\n    return parseInt(this.m_Struct[this.m_Pos], 10);\n  }\n\n  getStringLen() {\n    // @ts-ignore\n    return parseInt(this.m_Struct[this.m_Pos + 2], 10);\n  }\n\n  getStringPos() {\n    // @ts-ignore\n    return parseInt(this.m_Struct[this.m_Pos + 1], 10);\n  }\n\n  isSimple() {\n    return (this.m_Struct[this._m_LPos] > 0);\n  }\n\n  getParentLineWordNum() {\n    return Math.abs(this.m_Struct[this._m_LPos]);\n  }\n\n  getNextWord() {\n    const simple = this.isSimple();\n    const word_len = (simple) ? 5 : 11;\n    const basic_line_off = (simple) ? 6 : 10;\n    const num_words = this.getParentLineWordNum();\n    const last_word_start = this._m_LPos + basic_line_off + (num_words - 1) * word_len;\n    if (this.m_Pos >= last_word_start) {\n      const tmpWord = new WordOld();\n      tmpWord.initMembers(this.m_Struct, -1, -1, this._m_Str, this._m_Quads, 0);\n      return tmpWord;\n    }\n\n    const tmpWord = new WordOld();\n    tmpWord.initMembers(this.m_Struct, this.m_Pos + word_len, this._m_LPos, this._m_Str, this._m_Quads, this._m_CurNum + 1);\n    return tmpWord;\n  }\n\n  getGlyphGlobalPos(id: number) {\n    const num = this.getNumGlyphs();\n    if (id < 0 || id >= num) {\n      return -1;\n    }\n    // @ts-ignore\n    return parseInt(this.m_Struct[this.m_Pos + 1], 10) + id;\n  }\n\n  getGlyphQuad(glyph_idx: number, quad: Array<number>) {\n    const gid = this.getGlyphGlobalPos(glyph_idx);\n    if (gid < 0) {\n      return;\n    }\n    const l = new LineOld();\n    l.initMembers(this.m_Struct, this._m_LPos, this._m_Str, this._m_Quads, 0);\n    if (l.isSimple()) {\n      const b = new SelectionRect();\n      l.getBBox(b);\n      const y_low = (b.y1 < b.y2) ? b.y1 : b.y2;\n      const y_top = (b.y1 > b.y2) ? b.y1 : b.y2;\n      const q_str_id = 8 * gid;\n      quad[0] = this._m_Quads[q_str_id];\n      quad[1] = y_low;\n      quad[2] = this._m_Quads[q_str_id + 2];\n      quad[3] = quad[1];\n      quad[4] = this._m_Quads[q_str_id + 4];\n      quad[5] = y_top;\n      quad[6] = this._m_Quads[q_str_id + 6];\n      quad[7] = quad[5];\n    } else {\n      const q_str_id = 8 * gid;\n      for (let i = 0; i < 8; ++i) {\n        quad[i] = this._m_Quads[q_str_id + i];\n      }\n    }\n  }\n\n  getQuad(quad: Array<number>) {\n    const l = new LineOld();\n    l.initMembers(this.m_Struct, this._m_LPos, this._m_Str, this._m_Quads, 0);\n    if (l.isSimple()) {\n      let x_left = this.m_Struct[this.m_Pos + 3];\n      let x_right = this.m_Struct[this.m_Pos + 4];\n      if (x_left > x_right) {\n        const temp = x_left;\n        x_left = x_right;\n        x_right = temp;\n      }\n      const b = new SelectionRect();\n      l.getBBox(b);\n      const y_low = (b.y1 < b.y2) ? b.y1 : b.y2;\n      const y_top = (b.y1 > b.y2) ? b.y1 : b.y2;\n      quad[0] = x_left;\n      quad[1] = y_low;\n      quad[2] = x_right;\n      quad[3] = y_low;\n      quad[4] = x_right;\n      quad[5] = y_top;\n      quad[6] = x_left;\n      quad[7] = y_top;\n    } else {\n      const start = this.m_Pos + 3;\n      for (let i = 0; i < 8; ++i) {\n        quad[i] = this.m_Struct[start + i];\n      }\n    }\n  }\n\n  getBBox(bbox: Array<number>) {\n    const l = new LineOld();\n    l.initMembers(this.m_Struct, this._m_LPos, this._m_Str, this._m_Quads, 0);\n    if (l.isSimple()) {\n      let x_left = this.m_Struct[this.m_Pos + 3];\n      let x_right = this.m_Struct[this.m_Pos + 4];\n      if (x_left > x_right) {\n        const temp = x_left;\n        x_left = x_right;\n        x_right = temp;\n      }\n      const b = new SelectionRect();\n      l.getBBox(b);\n      const y1 = (b.y1 < b.y2) ? b.y1 : b.y2;\n      const y2 = (b.y1 > b.y2) ? b.y1 : b.y2;\n      bbox[0] = x_left;\n      bbox[1] = y1;\n      bbox[2] = x_right;\n      bbox[3] = y2;\n    } else {\n      let min_x = 1.79769E+308;\n      let max_x = doubleData.MIN;\n      let min_y = 1.79769E+308;\n      let max_y = doubleData.MIN;\n      const start = this.m_Pos + 3;\n      for (let i = 0; i < 4; ++i) {\n        const x = this.m_Struct[start + i * 2];\n        const y = this.m_Struct[start + i * 2 + 1];\n        min_x = Math.min(min_x, x);\n        max_x = Math.max(max_x, x);\n        min_y = Math.min(min_y, y);\n        max_y = Math.max(max_y, y);\n      }\n      bbox[0] = min_x;\n      bbox[1] = min_y;\n      bbox[2] = max_x;\n      bbox[3] = max_y;\n    }\n  }\n\n  getCurrentNum() {\n    return this._m_CurNum;\n  }\n}"],"mappings":";AAAA;ACwDA;AAsCA;AA4CA;AA0DA;AA2DA;ACzMA;AA+BA;AA8BA;AAsCA;AC5FA;AAoCA;AAuCA;AA0CA;","sourceRoot":""}